<!DOCTYPE html>
<html>
  <head>
    <title>Dead Man's Switch</title>
    <script src="https://www.gstatic.com/firebasejs/10.3.0/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/10.3.0/firebase-auth-compat.js"></script>
  </head>
  <body>
    <h1>Welcome to Dead Man's Switch</h1>
    <button id="loginBtn">Sign in with Google/Check In</button>

    <form id="settingsForm" style="display:none;">
      <label>Threshold Time (in hours): <input type="number" id="threshold" /></label><br/>
      <label>Contact Email(s): <input type="email" id="contacts" multiple /></label><br/>
      <button type="submit">Save Settings</button>
    </form>

    <div id="statusSection" style="margin-top: 1rem; display: none;">
      <p>‚è±Ô∏è Threshold: <span id="thresholdDisplay"></span> hours</p>
      <p>‚úÖ Last Check-In: <span id="lastCheckinDisplay"></span></p>
      <p>üö® Next Alert Time: <span id="nextAlertDisplay"></span></p>
    </div>

    <button id="deleteBtn" onclick="deleteAccount()" style="display: none;">Delete My Account</button>


    <script>
      const apiUrl = "https://us0kzq5ltk.execute-api.us-east-1.amazonaws.com";
      const firebaseConfig = {
        apiKey: "AIzaSyCXQw4RZq1rJjdLhP9LUCnH0dWMybYibqc",
        authDomain: "deadmans-switch-f8d02.firebaseapp.com",
        projectId: "deadmans-switch-f8d02",
      };
      firebase.initializeApp(firebaseConfig);
      firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE);

      firebase.auth().onAuthStateChanged((user) => {
        const deleteBtn = document.getElementById("deleteBtn");
        const loginBtn = document.getElementById("loginBtn");
        const settingsForm = document.getElementById("settingsForm");
        const thresholdInput = document.getElementById("threshold");
        const contactsInput = document.getElementById("contacts");
        const statusSection = document.getElementById("statusSection");

        if (user) {
          deleteBtn.style.display = "inline-block";
          loginBtn.style.display = "none";
          settingsForm.style.display = "block";

          user.getIdToken().then((token) => {
            // Auto Check-in
            fetch(apiUrl, {
              method: "POST",
              headers: {
                "Authorization": `Bearer ${token}`,
                "Content-Type": "application/json"
              },
              body: JSON.stringify({
                user_id: user.uid,
                mode: "checkin"
              })
            });

            // Fetch existing config
            fetch(apiUrl, {
              method: "POST",
              headers: {
                "Authorization": `Bearer ${token}`,
                "Content-Type": "application/json"
              },
              body: JSON.stringify({
                user_id: user.uid,
                mode: "fetch"
              })
            })
            .then(res => {
              if (res.status === 204) return null;
              return res.json();
            })
            .then(data => {
              if (!data) return;

              thresholdInput.value = data.threshold_hours;
              contactsInput.value = Array.isArray(data.contact_emails)
                ? data.contact_emails.join(", ")
                : data.contact_emails;

              const thresholdHours = parseInt(data.threshold_hours);
              const lastCheckin = new Date(data.last_checkin_time);
              const nextAlert = new Date(lastCheckin.getTime() + thresholdHours * 60 * 60 * 1000);

              document.getElementById("thresholdDisplay").innerText = thresholdHours;
              document.getElementById("lastCheckinDisplay").innerText = lastCheckin.toLocaleString();
              document.getElementById("nextAlertDisplay").innerText = nextAlert.toLocaleString();
              statusSection.style.display = "block";
            });
          });
        } else {
          // Hide everything for logged-out users
          deleteBtn.style.display = "none";
          loginBtn.style.display = "inline-block";
          settingsForm.style.display = "none";
          statusSection.style.display = "none";
        }
      });

      const auth = firebase.auth();
      const loginBtn = document.getElementById("loginBtn");
      const settingsForm = document.getElementById("settingsForm");

      loginBtn.onclick = () => {
        const provider = new firebase.auth.GoogleAuthProvider();
        auth.signInWithPopup(provider).then((result) => {
          loginBtn.style.display = "none";
          settingsForm.style.display = "block";
        });
      };

      document.getElementById("settingsForm").onsubmit = (e) => {
        e.preventDefault();
        const threshold = document.getElementById("threshold").value;
        const contacts = document.getElementById("contacts").value.split(",").map(c => c.trim());


        console.log("Saving:", { threshold, contacts });

        const user = firebase.auth().currentUser;
        const user_id = user.uid;

        firebase.auth().currentUser.getIdToken(/* forceRefresh */ true).then(function(idToken) {
          fetch(apiUrl, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              "Authorization": "Bearer " + idToken
            },
            body: JSON.stringify({
              user_id: firebase.auth().currentUser.uid,
              threshold_hours: threshold,
              contact_emails: contacts
            })
          }).then(res => res.json())
            .then(data => {
              alert("Settings saved to AWS!");
            }).catch(err => {
              console.error("Error saving settings:", err);
              alert("Something went wrong.");
            });
          });
      };

      async function deleteAccount() {
        const confirmation = confirm("Are you sure? This will delete your configuration and log you out.");
        if (!confirmation) return;

        const button = document.getElementById("deleteBtn");
        button.disabled = true;

        const user = firebase.auth().currentUser;
        const token = await user.getIdToken();

        const response = await fetch(apiUrl, {
          method: "POST",
          headers: {
            "Authorization": `Bearer ${token}`,
            "Content-Type": "application/json"
          },
          body: JSON.stringify({ 
            user_id: user.uid,
            mode: "delete" 
          })
        });

        if (response.ok) {
          alert("Account deleted successfully.");
          await firebase.auth().signOut();
          window.location.href = "/";
        } else {
          alert("Error deleting account.");
          button.disabled = false;
        }
      }
    </script>
  </body>
</html>
